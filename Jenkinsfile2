pipeline {
    agent any
    stages {
        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'sonarqube'
            }
            steps {
                withSonarQubeEnv('SonarQube'){
                    sh "${scannerHome}/bin/sonar-scanner -Dsonar.language=python"
                    script {
                        env.sonar_python_version = '3.8'
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }
    }
    post {
        failure {
            emailext body: "The SonarQube quality check failed. Please see the attached logs for more information.",
                     subject: "SonarQube Quality Check Failed",
                     to: "krishnasharma2910.ks@gmail.com",
                     attachmentsPattern: "**/target/sonar/log/*.log"
        }
    }
}
