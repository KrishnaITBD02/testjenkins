pipeline {
agent any
stages {

    stage('SonarQube analysis') {
        environment {
            scannerHome = tool '[sonar server name]'
        }
        steps {
            withSonarQubeEnv('[Sonar Environment name]') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.language=python -Dsonar.python.version=3.8"
            }
        }
    }

    stage("Quality Gate") {
        timeout(time: 1, unit: 'HOURS') {
            def qg = waitForQualityGate()
            if (qg.status != 'OK') {
                error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
        }
    }
}
}
